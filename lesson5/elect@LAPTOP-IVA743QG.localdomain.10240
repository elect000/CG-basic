# This is a Bibtex reference
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:t arch:headline ^:nil
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:nil e:nil email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:nil title:t toc:nil todo:t |:t
#+TITLE: CG基礎 課題5
#+DATE: 
#+AUTHOR: 情報科学類二年 江畑 拓哉(201611350)
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 9.1.1)
#+LATEX_CLASS: koma-article
#+LATEX_CLASS_OPTIONS: 
#+LATEX_HEADER_EXTRA: \bibliography{reference}
#+LaTeX_CLASS_OPTIONS:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+STARTUP: indent overview inlineimages

* 動作環境の説明
- OS
  Manjaro Linux 17.0.6 Gellivara
- コンパイル
  g++ (GCC) 7.2.0
  Copyright (C) 2017 Free Software Foundation, Inc.
- コーディング
  Spacemacs 0.200.9 (Emacs25.3.1)

* 課題1
** 実行結果
#+BEGIN_SRC shell
~$ g++ stl_vector_example.cpp -lGL -lglut -lGLU
~$ ./a.out
Vector2d(1.000000 2.000000)
Vector2d(3.000000 6.000000)
Vector2d(1.000000 2.000000)
v3.length() = 2.236068
Vector2d(5.000000 10.000000)
Vector2d(0.447214 0.894427)
v3.length() = 1.000000
vec.size() = 3
firstElement=(1.000000, 2.000000)
vec[0]=(1.000000, 2.000000)
vec[1]=(2.000000, 4.000000)
vec[2]=(3.000000, 6.000000)
Vector2d(10.300000 10.200000)
vecSum.length() = 14.495861
~$
#+END_SRC
** コード
#+BEGIN_SRC c++
#include <cstdlib>
#include <cmath>
#include <vector>
#include <stdio.h>

using namespace std;


// 2次元ベクトルを扱うためのクラス
class Vector2d {
public:
	double x, y;
	Vector2d() { x = y = 0; }
	Vector2d(double _x, double _y) { x = _x; y = _y; }
	void set(double _x, double _y) { x = _x; y = _y; }

	// 長さを1に正規化する
	void normalize() {
		double len = length();
		x /= len; y /= len; 
	}

	// 長さを返す
	double length() { return sqrt(x * x + y * y); }

	// s倍する
	void scale(const double s) { x *= s; y *= s; }

	// 加算の定義
	Vector2d operator+(Vector2d v) { return Vector2d(x + v.x, y + v.y); }

	// 減算の定義
	Vector2d operator-(Vector2d v) { return Vector2d(x - v.x, y - v.y); }

	// 内積の定義
	double operator*(Vector2d v) { return x * v.x + y* v.y; }

	// 代入演算の定義
	Vector2d& operator=(const Vector2d& v){ x = v.x; y = v.y; return (*this); }

	// 加算代入の定義
	Vector2d& operator+=(const Vector2d& v) { x += v.x; y += v.y; return (*this); }

	// 減算代入の定義
	Vector2d& operator-=(const Vector2d& v) { x -= v.x; y -= v.y; return (*this); }

	// 値を出力する
	void print() { printf("Vector2d(%f %f)\n", x, y); }
};

// マイナスの符号の付いたベクトルを扱えるようにするための定義 例：b=(-a); のように記述できる
Vector2d operator-( const Vector2d& v ) { return( Vector2d( -v.x, -v.y ) ); }

// ベクトルと実数の積を扱えるようにするための定義 例： c=5*a+2*b; c=b*3; のように記述できる
Vector2d operator*( const double& k, const Vector2d& v ) { return( Vector2d( k*v.x, k*v.y ) );}
Vector2d operator*( const Vector2d& v, const double& k ) { return( Vector2d( v.x*k, v.y*k ) );}

// ベクトルを実数で割る操作を扱えるようにするための定義 例： c=a/2.3; のように記述できる
Vector2d operator/( const Vector2d& v, const double& k ) { return( Vector2d( v.x/k, v.y/k ) );}

int main(int argc, char**argv) {
	// =====================================================
	// 2次元ベクトルクラス Vector2d の使い方の例
	// =====================================================

	// 2次元ベクトル(1, 2)の作成
	Vector2d v0(1, 2);

	// 作成した2次元ベクトルのx,y座標値を確認
	v0.print();

	// 2次元ベクトル(2, 4)の作成
	Vector2d v1(2, 4);

	// ベクトルの加算
	Vector2d v2 = v0 + v1;

	// 加算した結果の確認
	v2.print();

	// ベクトルの減算
	Vector2d v3 = v1 - v0;

	// 減算した結果の確認
	v3.print();

	// ベクトルの長さの確認
	printf("v3.length() = %lf\n", v3.length());

	// ベクトルのスカラー倍
	v3 = 5.0 * v3;

	// スカラー倍した結果の確認
	v3.print();

	// ベクトルの長さの正規化
	v3.normalize();

	// 正規化した結果の確認
	v3.print();

	// ベクトルの長さの確認
	printf("v3.length() = %lf\n", v3.length());


	// =====================================================
	// std::vector を要素数を変更可能な配列として使う例
	// =====================================================

	std::vector<Vector2d> vec; // 配列の宣言 （Vector2d 型のオブジェクトを格納できる）
	vec.push_back(v0); // 配列の末尾に v0 を追加
	vec.push_back(v1); // 配列の末尾に v1 を追加
	vec.push_back(v2); // 配列の末尾に v2 を追加
	printf("vec.size() = %d\n", (int)vec.size()); // 配列に入っている要素数を確認

  // 配列の先頭要素を取得

	Vector2d firstElement = vec[0];

	// 取得した要素の値を出力
	printf("firstElement=(%lf, %lf)\n", firstElement.x, firstElement.y);

	// 全ての要素を出力
	for(unsigned int i = 0; i < vec.size(); i++) {
		printf("vec[%d]=(%lf, %lf)\n", i, vec[i].x, vec[i].y);
	}


	// ★課題：以下にコメント文で指示する内容のプログラムコードを追加すること
	
	// (1) vec を空にする
  vec.clear();

	// (2) 次の2次元ベクトルを vec に格納する  
	// (5.0, 2.0), (3.2, -2.3), (4.1, 9.2), (-2.0, 4.0), (0.0, -2.7)
  vec.push_back(Vector2d(5.0, 2.0));
  vec.push_back(Vector2d(3.2, -2.3));
  vec.push_back(Vector2d(4.1, 9.2));
  vec.push_back(Vector2d(-2.0, 4.0));
  vec.push_back(Vector2d(0.0, -2.7));

	// (3) 上記の2次元ベクトルを全て加算した結果を Vector2d vecSum に格納する
  Vector2d vecSum = Vector2d();
  for (unsigned int i = 0; i < vec.size(); ++i) {
    vecSum += vec[i];
  }

	// (4) vecSum の内容(x,yの値)と、vecSum の長さを出力する
  vecSum.print();
  printf("vecSum.length() = %lf\n", vecSum.length());

	// Visual Studio でコンソールがすぐに閉じないようにするためには次のコメントアウトをはずす
  //	system("pause"); 

	return 0;
}
#+END_SRC
* 課題2
** 実行結果
[[../../../Pictures/Screenshot from 2017-11-08 01-24-14.png]]
[[../../../Pictures/Screenshot from 2017-11-08 01-25-07.png]]
** コード
#+BEGIN_SRC c++
#include <cstdlib>
#include <cmath>
#include <vector>
#include <GL/glut.h>
#include <stdio.h>
using namespace std;

// 2次元ベクトルを扱うためのクラス
class Vector2d {
public:
	double x, y;
	Vector2d() { x = y = 0; }
	Vector2d(double _x, double _y) { x = _x; y = _y; }
	void set(double _x, double _y) { x = _x; y = _y; }

	// 長さを1に正規化する
	void normalize() {
		double len = length();
		x /= len; y /= len; 
	}

	// 長さを返す
	double length() { return sqrt(x * x + y * y); }

	// s倍する
	void scale(const double s) { x *= s; y *= s; }

	// 加算の定義
	Vector2d operator+(Vector2d v) { return Vector2d(x + v.x, y + v.y); }

	// 減算の定義
	Vector2d operator-(Vector2d v) { return Vector2d(x - v.x, y - v.y); }

	// 内積の定義
	double operator*(Vector2d v) { return x * v.x + y* v.y; }

	// 代入演算の定義
	Vector2d& operator=(const Vector2d& v){ x = v.x; y = v.y; return (*this); }

	// 加算代入の定義
	Vector2d& operator+=(const Vector2d& v) { x += v.x; y += v.y; return (*this); }

	// 減算代入の定義
	Vector2d& operator-=(const Vector2d& v) { x -= v.x; y -= v.y; return (*this); }

	// 値を出力する
	void print() { printf("Vector2d(%f %f)\n", x, y); }
};

// マイナスの符号の付いたベクトルを扱えるようにするための定義 例：b=(-a); のように記述できる
Vector2d operator-( const Vector2d& v ) { return( Vector2d( -v.x, -v.y ) ); }

// ベクトルと実数の積を扱えるようにするための定義 例： c=5*a+2*b; c=b*3; のように記述できる
Vector2d operator*( const double& k, const Vector2d& v ) { return( Vector2d( k*v.x, k*v.y ) );}
Vector2d operator*( const Vector2d& v, const double& k ) { return( Vector2d( v.x*k, v.y*k ) );}

// ベクトルを実数で割る操作を扱えるようにするための定義 例： c=a/2.3; のように記述できる
Vector2d operator/( const Vector2d& v, const double& k ) { return( Vector2d( v.x/k, v.y/k ) );}

// ================================================================================================


std::vector<Vector2d> g_ControlPoints; // 制御点を格納する

int Fact (int n)
{
  int r = 1;
  for (int i=2; i<=n; i++)
    r *= i;
  return r;
}

// 表示部分をこの関数で記入
void display(void) {        
	glClearColor (1.0, 1.0, 1.0, 1.0);  // 消去色指定
	glClear (GL_COLOR_BUFFER_BIT );     // 画面消去

	// 制御点の描画
	glPointSize(5);
	glColor3d(0.0, 0.0, 0.0);
	glBegin(GL_POINTS);
	for(unsigned int i = 0; i < g_ControlPoints.size(); i++) {
		glVertex2d(g_ControlPoints[i].x, g_ControlPoints[i].y);
	}
	glEnd();

	// 制御点を結ぶ線分の描画
	glColor3d(1.0, 0.0, 0.0);
	glLineWidth(1);
	glBegin(GL_LINE_STRIP);
	for(unsigned int i = 0; i < g_ControlPoints.size(); i++) {
		glVertex2d(g_ControlPoints[i].x, g_ControlPoints[i].y);
	}
	glEnd();

  // Bezier
  int n = 3; // n means dimensions
  int  count = 0; // count pieces of bezier
  int temp = g_ControlPoints.size() - n;
  while (temp > 0) {
    count++;
    temp -= n;
  }

  Vector2d sum = Vector2d(0, 0);
  glColor3d(0.0, 0.0, 1.0);
	glLineWidth(1);
  glBegin(GL_LINE_STRIP);
  if (g_ControlPoints.size() >= n + 1) {
    for (int k = 0; k < count; ++k) {
      for (float t = 0.0f; t <= 1.001f; t += 0.01f) {
        sum = Vector2d(0, 0);
        for (int i = 0; i <= n; ++i) {
          sum += Fact(n)/Fact(i)/Fact(n - i) * pow(t, i) * pow((1.0 - t), (n - i)) * g_ControlPoints[i + k * n];
        }
        glVertex2d(sum.x, sum.y);
      }
    }
  }
  glEnd();

	glutSwapBuffers();
}

void resizeWindow(int w, int h) {
	h = (h == 0) ? 1 : h;
	glViewport(0, 0, w, h);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	// ウィンドウ内の座標系設定
	// マウスクリックの座標と描画座標が一致するような正投影
	glOrtho(0, w, h, 0, -10, 10);

	glMatrixMode(GL_MODELVIEW);
}

// キーボードイベント処理
void keyboard(unsigned char key, int x, int y) {
	switch (key) {
	case 'q':
	case 'Q':
	case '\033':
		exit(0);  /* '\033' は ESC の ASCII コード */
	default:
		break;
	} 
	glutPostRedisplay();
}

// マウスイベント処理
void mouse(int button, int state, int x, int y) {
	if(state == GLUT_DOWN) {
		switch (button) {
		case GLUT_LEFT_BUTTON:
			// クリックした位置に制御点を追加
			g_ControlPoints.push_back(Vector2d(x, y));
		break;
		case GLUT_MIDDLE_BUTTON:
		break;
		case GLUT_RIGHT_BUTTON:
			// 末尾の制御点の削除
			if(!g_ControlPoints.empty()) {
				g_ControlPoints.pop_back();
			}
		break;
		default:
		break;
		}
		glutPostRedisplay(); // 再描画
	}
}

// メインプログラム
int main (int argc, char *argv[]) { 
	glutInit(&argc, argv);          // ライブラリの初期化
	glutInitDisplayMode(GLUT_RGBA|GLUT_DOUBLE); // 描画モードの指定
	glutInitWindowSize(800 , 800);  // ウィンドウサイズを指定
	glutCreateWindow(argv[0]);      // ウィンドウを作成
	glutDisplayFunc(display);       // 表示関数を指定
	glutReshapeFunc(resizeWindow);  // ウィンドウサイズが変更されたときの関数を指定
	glutKeyboardFunc(keyboard);     // キーボードイベント処理関数を指定
	glutMouseFunc(mouse);           // マウスイベント処理関数を指定
	glutMainLoop();                 // イベント待ち
	return 0;
}
#+END_SRC
* 課題3
** 実行結果
[[../../../Pictures/Screenshot from 2017-11-08 01-23-27.png]]
** コード
#+BEGIN_SRC c++
#include <cstdlib>
#include <cmath>
#include <vector>
#include <GL/glut.h>
#include <stdio.h>
using namespace std;

// 2次元ベクトルを扱うためのクラス
class Vector2d {
public:
	double x, y;
	Vector2d() { x = y = 0; }
	Vector2d(double _x, double _y) { x = _x; y = _y; }
	void set(double _x, double _y) { x = _x; y = _y; }

	// 長さを1に正規化する
	void normalize() {
		double len = length();
		x /= len; y /= len; 
	}

	// 長さを返す
	double length() { return sqrt(x * x + y * y); }

	// s倍する
	void scale(const double s) { x *= s; y *= s; }

	// 加算の定義
	Vector2d operator+(Vector2d v) { return Vector2d(x + v.x, y + v.y); }

	// 減算の定義
	Vector2d operator-(Vector2d v) { return Vector2d(x - v.x, y - v.y); }

	// 内積の定義
	double operator*(Vector2d v) { return x * v.x + y* v.y; }

	// 代入演算の定義
	Vector2d& operator=(const Vector2d& v){ x = v.x; y = v.y; return (*this); }

	// 加算代入の定義
	Vector2d& operator+=(const Vector2d& v) { x += v.x; y += v.y; return (*this); }

	// 減算代入の定義
	Vector2d& operator-=(const Vector2d& v) { x -= v.x; y -= v.y; return (*this); }

	// 値を出力する
	void print() { printf("Vector2d(%f %f)\n", x, y); }
};

// マイナスの符号の付いたベクトルを扱えるようにするための定義 例：b=(-a); のように記述できる
Vector2d operator-( const Vector2d& v ) { return( Vector2d( -v.x, -v.y ) ); }

// ベクトルと実数の積を扱えるようにするための定義 例： c=5*a+2*b; c=b*3; のように記述できる
Vector2d operator*( const double& k, const Vector2d& v ) { return( Vector2d( k*v.x, k*v.y ) );}
Vector2d operator*( const Vector2d& v, const double& k ) { return( Vector2d( v.x*k, v.y*k ) );}

// ベクトルを実数で割る操作を扱えるようにするための定義 例： c=a/2.3; のように記述できる
Vector2d operator/( const Vector2d& v, const double& k ) { return( Vector2d( v.x/k, v.y/k ) );}

// ================================================================================================

int Fact (int n)
{
  int r = 1;
  for (int i=2; i<=n; i++)
    r *= i;
  return r;
}

std::vector<Vector2d> g_ControlPoints; // 制御点を格納する

// 表示部分をこの関数で記入
void display(void) {
	glClearColor (1.0, 1.0, 1.0, 1.0);  // 消去色指定
	glClear (GL_COLOR_BUFFER_BIT );     // 画面消去

	// 制御点の描画
	glPointSize(5);
	glColor3d(0.0, 0.0, 0.0);
	glBegin(GL_POINTS);
	for(unsigned int i = 0; i < g_ControlPoints.size(); i++) {
		glVertex2d(g_ControlPoints[i].x, g_ControlPoints[i].y);
	}
	glEnd();

	// 制御点を結ぶ線分の描画
	glColor3d(1.0, 0.0, 0.0);
	glLineWidth(1);
	glBegin(GL_LINE_STRIP);
	for(unsigned int i = 0; i < g_ControlPoints.size(); i++) {
		glVertex2d(g_ControlPoints[i].x, g_ControlPoints[i].y);
	}
	glEnd();

  // Bezier
  int n = 3; // n means dimensions
  int  count = 0; // count pieces of bezier
  int temp = g_ControlPoints.size() - n;
  while (temp > 0) {
    count++;
    temp -= n;
  }

  Vector2d sum = Vector2d(0, 0);
  glColor3d(0.0, 0.0, 1.0);
	glLineWidth(1);
  glBegin(GL_LINE_STRIP);
  if (g_ControlPoints.size() >= n + 1) {
    for (int k = 0; k < count; ++k) {
      for (float t = 0.0f; t <= 1.001f; t += 0.01f) {
        sum = Vector2d(0, 0);
        for (int i = 0; i <= n; ++i) {
          sum += Fact(n)/Fact(i)/Fact(n - i) * pow(t, i) * pow((1.0 - t), (n - i)) * g_ControlPoints[i + k * n];
        }
        glVertex2d(sum.x, sum.y);
      }
    }
  }
  glEnd();

  Vector2d l = Vector2d(0, 0);
  glColor3d(0.0, 1.0, 1.0);
	glLineWidth(1);
  
  if (g_ControlPoints.size() >= n + 1) {
    for (int k = 0; k < count; ++k) {
      for (float t = 0.0f; t <= 1.001f; t += 0.01f) {
        sum = Vector2d(0, 0);
        for (int i = 0; i <= n; ++i) {
          sum += Fact(n)/Fact(i)/Fact(n - i) * pow(t, i) * pow((1.0 - t), (n - i)) * g_ControlPoints[i + k * n];
        }
        l = -3 * (1 - t) * (1 - t) * g_ControlPoints[k * 3]
          + (9 * t * t - 12 * t + 3) * g_ControlPoints[k * 3 + 1]
          + (-9 * t * t + 6 * t) * g_ControlPoints[k * 3 + 2]
          + 3 * t * t * g_ControlPoints[k * 3 + 3];
        glBegin(GL_LINE_STRIP);
        glVertex2d(sum.x, sum.y);
        l.normalize();
        l = l * 70;
        l.set(sum.x - l.y, sum.y + l.x);
        glVertex2d(l.x, l.y);
        glEnd();
      }
    }
  }

	glutSwapBuffers();
}

void resizeWindow(int w, int h) {
	h = (h == 0) ? 1 : h;
	glViewport(0, 0, w, h);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	// ウィンドウ内の座標系設定
	// マウスクリックの座標と描画座標が一致するような正投影
	glOrtho(0, w, h, 0, -10, 10);

	glMatrixMode(GL_MODELVIEW);
}

// キーボードイベント処理
void keyboard(unsigned char key, int x, int y) {
	switch (key) {
	case 'q':
	case 'Q':
	case '\033':
		exit(0);  /* '\033' は ESC の ASCII コード */
	default:
		break;
	} 
	glutPostRedisplay();
}

// マウスイベント処理
void mouse(int button, int state, int x, int y) {
	if(state == GLUT_DOWN) {
		switch (button) {
		case GLUT_LEFT_BUTTON:
			// クリックした位置に制御点を追加
			g_ControlPoints.push_back(Vector2d(x, y));
		break;
		case GLUT_MIDDLE_BUTTON:
		break;
		case GLUT_RIGHT_BUTTON:
			// 末尾の制御点の削除
			if(!g_ControlPoints.empty()) {
				g_ControlPoints.pop_back();
			}
		break;
		default:
		break;
		}
		glutPostRedisplay(); // 再描画
	}
}

// メインプログラム
int main (int argc, char *argv[]) { 
	glutInit(&argc, argv);          // ライブラリの初期化
	glutInitDisplayMode(GLUT_RGBA|GLUT_DOUBLE); // 描画モードの指定
	glutInitWindowSize(800 , 800);  // ウィンドウサイズを指定
	glutCreateWindow(argv[0]);      // ウィンドウを作成
	glutDisplayFunc(display);       // 表示関数を指定
	glutReshapeFunc(resizeWindow);  // ウィンドウサイズが変更されたときの関数を指定
	glutKeyboardFunc(keyboard);     // キーボードイベント処理関数を指定
	glutMouseFunc(mouse);           // マウスイベント処理関数を指定
	glutMainLoop();                 // イベント待ち
	return 0;
}
#+END_SRC
* 課題4
** 実行結果
*** 3次
[[../../../Pictures/Screenshot from 2017-11-08 01-29-18.png]]
*** 2次
[[../../../Pictures/Screenshot from 2017-11-08 01-29-31.png]]
*** 1次
[[../../../Pictures/Screenshot from 2017-11-08 01-29-40.png]]
*** 3次以上
[[../../../Pictures/Screenshot from 2017-11-08 01-30-24.png]]
** コード
#+BEGIN_SRC c++
#include <cstdlib>
#include <cmath>
#include <vector>
#include <GL/glut.h>
#include <stdio.h>
using namespace std;

// 2次元ベクトルを扱うためのクラス
class Vector2d {
public:
	double x, y;
	Vector2d() { x = y = 0; }
	Vector2d(double _x, double _y) { x = _x; y = _y; }
	void set(double _x, double _y) { x = _x; y = _y; }

	// 長さを1に正規化する
	void normalize() {
		double len = length();
		x /= len; y /= len; 
	}

	// 長さを返す
	double length() { return sqrt(x * x + y * y); }

	// s倍する
	void scale(const double s) { x *= s; y *= s; }

	// 加算の定義
	Vector2d operator+(Vector2d v) { return Vector2d(x + v.x, y + v.y); }

	// 減算の定義
	Vector2d operator-(Vector2d v) { return Vector2d(x - v.x, y - v.y); }

	// 内積の定義
	double operator*(Vector2d v) { return x * v.x + y* v.y; }

	// 代入演算の定義
	Vector2d& operator=(const Vector2d& v){ x = v.x; y = v.y; return (*this); }

	// 加算代入の定義
	Vector2d& operator+=(const Vector2d& v) { x += v.x; y += v.y; return (*this); }

	// 減算代入の定義
	Vector2d& operator-=(const Vector2d& v) { x -= v.x; y -= v.y; return (*this); }

	// 値を出力する
	void print() { printf("Vector2d(%f %f)\n", x, y); }
};

// マイナスの符号の付いたベクトルを扱えるようにするための定義 例：b=(-a); のように記述できる
Vector2d operator-( const Vector2d& v ) { return( Vector2d( -v.x, -v.y ) ); }

// ベクトルと実数の積を扱えるようにするための定義 例： c=5*a+2*b; c=b*3; のように記述できる
Vector2d operator*( const double& k, const Vector2d& v ) { return( Vector2d( k*v.x, k*v.y ) );}
Vector2d operator*( const Vector2d& v, const double& k ) { return( Vector2d( v.x*k, v.y*k ) );}

// ベクトルを実数で割る操作を扱えるようにするための定義 例： c=a/2.3; のように記述できる
Vector2d operator/( const Vector2d& v, const double& k ) { return( Vector2d( v.x/k, v.y/k ) );}

// ================================================================================================

int Fact (int n)
{
  int r = 1;
  for (int i=2; i<=n; i++)
    r *= i;
  return r;
}

std::vector<Vector2d> g_ControlPoints; // 制御点を格納する
int n = 3; // n means dimensions

// 表示部分をこの関数で記入
void display(void) {
	glClearColor (1.0, 1.0, 1.0, 1.0);  // 消去色指定
	glClear (GL_COLOR_BUFFER_BIT );     // 画面消去

	// 制御点の描画
	glPointSize(5);
	glColor3d(0.0, 0.0, 0.0);
	glBegin(GL_POINTS);
	for(unsigned int i = 0; i < g_ControlPoints.size(); i++) {
		glVertex2d(g_ControlPoints[i].x, g_ControlPoints[i].y);
	}
	glEnd();

	// 制御点を結ぶ線分の描画
	glColor3d(1.0, 0.0, 0.0);
	glLineWidth(1);
	glBegin(GL_LINE_STRIP);
	for(unsigned int i = 0; i < g_ControlPoints.size(); i++) {
		glVertex2d(g_ControlPoints[i].x, g_ControlPoints[i].y);
	}
	glEnd();

  // Bezier
  int count = 0; // count pieces of bezier
  int temp = g_ControlPoints.size() - n;
  while (temp > 0) {
    count++;
    temp -= n;
  }

  glColor3d(0.0, 0.0, 1.0);
	glLineWidth(1);
  glBegin(GL_LINE_STRIP);
  if (n == 1) {
    for(unsigned int i = 0; i < g_ControlPoints.size(); i++) {
      glVertex2d(g_ControlPoints[i].x, g_ControlPoints[i].y);
    }
  }
  else {
    Vector2d sum = Vector2d(0, 0);
    if (g_ControlPoints.size() >= n + 1) {
      for (int k = 0; k < count; ++k) {
        for (float t = 0.0f; t <= 1.001f; t += 0.01f) {
          sum = Vector2d(0, 0);
          for (int i = 0; i <= n; ++i) {
            sum += Fact(n)/Fact(i)/Fact(n - i) * pow(t, i) * pow((1.0 - t), (n - i)) * g_ControlPoints[i + k * n];
          }
          glVertex2d(sum.x, sum.y);
        }
      }
    }
  }
  glEnd();

	glutSwapBuffers();
}

void resizeWindow(int w, int h) {
	h = (h == 0) ? 1 : h;
	glViewport(0, 0, w, h);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	// ウィンドウ内の座標系設定
	// マウスクリックの座標と描画座標が一致するような正投影
	glOrtho(0, w, h, 0, -10, 10);

	glMatrixMode(GL_MODELVIEW);
}

// キーボードイベント処理
void keyboard(unsigned char key, int x, int y) {
	switch (key) {
	case 'q':
	case 'Q':
	case '\033':
		exit(0);  /* '\033' は ESC の ASCII コード */

	default:
		break;
	} 
	glutPostRedisplay();
}

// マウスイベント処理
void mouse(int button, int state, int x, int y) {
	if(state == GLUT_DOWN) {
		switch (button) {
		case GLUT_LEFT_BUTTON:
			// クリックした位置に制御点を追加
			g_ControlPoints.push_back(Vector2d(x, y));
		break;
		case GLUT_MIDDLE_BUTTON:
		break;
		case GLUT_RIGHT_BUTTON:
			// 末尾の制御点の削除
			if(!g_ControlPoints.empty()) {
				g_ControlPoints.pop_back();
			}
		break;
		default:
		break;
		}
		glutPostRedisplay(); // 再描画
	}
}

void SpecialInput(int key, int x, int y) {
  switch (key) {
  case GLUT_KEY_UP:
    n++;
    break;
  case GLUT_KEY_DOWN:
    if (n >= 2){
      n--;
    }
    break;
  default:
    break;
  }
  glutPostRedisplay();
}
// メインプログラム
int main (int argc, char *argv[]) { 
	glutInit(&argc, argv);          // ライブラリの初期化
	glutInitDisplayMode(GLUT_RGBA|GLUT_DOUBLE); // 描画モードの指定
	glutInitWindowSize(800 , 800);  // ウィンドウサイズを指定
	glutCreateWindow(argv[0]);      // ウィンドウを作成
	glutDisplayFunc(display);       // 表示関数を指定
	glutReshapeFunc(resizeWindow);  // ウィンドウサイズが変更されたときの関数を指定
	glutKeyboardFunc(keyboard);     // キーボードイベント処理関数を指定
  glutSpecialFunc(SpecialInput);  // enable arrow keys
	glutMouseFunc(mouse);           // マウスイベント処理関数を指定
	glutMainLoop();                 // イベント待ち
	return 0;
}
#+END_SRC
